// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id                           String      @id @default(uuid()) @db.Char(36)
    firstName                    String?
    lastName                     String?
    userName                     String      @unique
    email                        String      @unique
    address                      Json?
    lastLoginIp                  String?
    password                     String
    passwordResetToken           String?
    passwordResetTokenExpiration DateTime?
    created_at                   DateTime    @default(now())
    updated_at                   DateTime    @updatedAt
    OAuthToken                   OAuthToken?
    EmailLog                     EmailLog?
    sessions                     Session?
    Otp                          Otp?
}

model OAuthToken {
    id            String   @id @default(uuid()) @db.Char(36)
    user_id       String   @unique
    access_token  String
    refresh_token String
    expire_in     Int
    created_at    DateTime @default(now())
    updated_at    DateTime @updatedAt
    user          User?    @relation(fields: [user_id], references: [id])
}

model EmailLog {
    id              String   @id @default(uuid()) @db.Char(36)
    user_id         String   @unique
    recipient_email String
    subject         String?
    body            String?
    status          String
    created_at      DateTime @default(now())
    user            User     @relation(fields: [user_id], references: [id])
}

model Session {
    id        String   @id @default(uuid()) @db.Char(36)
    sid       String   @unique
    userId    String?  @unique
    user      User?    @relation(fields: [userId], references: [id])
    expiresAt DateTime @db.Timestamp(6)
    data      Json     @db.Json

    @@index([expiresAt], map: "IDX_session_expire")
}

model Otp {
    id         String   @id @default(uuid()) @db.Char(36)
    userId     String   @unique
    otp        String
    created_at DateTime @default(now())
    expiresAt  DateTime
    user       User?    @relation(fields: [userId], references: [id])
}
